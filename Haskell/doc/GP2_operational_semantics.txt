% GP2 semantics
% Glyn Faulkner
% 2014-04-08


`<R, G>`
 ~  Configuration: Set of rules `R` and graph `G`. Rules are applied non-deterministically. Notation is `{R₁, R₂, ...}`. Special case for single rules, syntax is simply `R` -- braces are optional.

`R ; S`
  ~ Sequencing command `R` followed by command `S`, where `R` and `S` can be conditionals, loops, rule sets, or whatever...

`P!`
  ~ Apply rule `P` for as long as possible


`<if C then P else Q, G>`
  ~ test if `C` can be applied to `G`. If so applies `P` to `G` otherwise applies `Q` to `G`. `else` clause is optional, which is equivalent to `<if C then P else skip, G>`

`<try C then P else Q, G>`
  ~ test if `C` can be applied to `G` to produce `H`. If so apply `P` to `H`, otherwise apply `Q` to `G`. `else` is optional as above. `then` is also optional: `<try C, G>` which is equivalent to `try C then skip else skip`

`<P or Q, G>`
  ~ non-deterministic choice of P or Q applied to G.

`<skip, G>`
  ~ `skip` is a language keyword denoting a rule that does nothing and always succeeds. Implemented as a rule matching the empty graph and returning the empty graph
 
`<fail, G>`
  ~ `fail` is a language keyword denoting a rule that done nothing and always fails.



<!-- vim: set lbr spell filetype=pdc: -->
