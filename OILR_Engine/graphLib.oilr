# ################################################################# #

variable: _real-index
variable: index-size
variable: bool-flag
true bool-flag !

: oilr-index _real-index @ call ;

# NOTE: bytes->elems gives the number of elems that will fit into 
#   bytes of space. There may be space left over. note also the
#   unsigned shift.
: bytes->elems  GraphElemShift u-shift-down ;  # bytes -- n-elems

: elems  GraphElemShift shift-up  ;  # n -- bytes
' elems alias: elem

: next-elem   1 elem after   ;  # elem -- elem+1

: OILR #immediate
	create # n --
?		dup 0 >  assertion: There must be at least one OILR index
		here 2 cells before push
		dup index-size !
		2* cells allot
?		peek @   DoDoesAddr  =  assertion: created broken index
		pop _real-index !
	does  # n addr -- addr
		swap
?		dup  index-size @  <  assertion: requested invalid index
		2* cells after
;
: host-graph #immediate
?	_real-index @  assertion: Uninitialised OILR index
	` ;
	use-dict
	elem-align-dp
	here host !
	here host-free !
	use-anon
;

# backtracking-stack primitives
16 MB constant: BStackSize
BStackSize buffer constant: b-stack-max
b-stack-max BStackSize + constant: b-stack
variable: bsp
b-stack bsp !

# The b-stack is executable. Executing it undoes the changes it documents
# if bool-flag is false or frees preserved resources
: b-return  ip@ bsp !  trash  ;
: b-push  bsp @   1 cell before stash !   pop bsp !  ;
: b-call  DoAddr b-push  bsp @  call ;


# Index structure:  |  next  |  count
struct: dl-list
	1 cell: .first
	1 cell: .len
end-struct

: ->first .first @ ;
: ->len  .len  @ ;

# List item structure:   |  next  |  head  |  prev
struct: dl-list-item
	1 cell: .next
	1 cell: .head
	1 cell: .prev
end-struct

: ->next .next @ ;
: ->prev .prev @ ;
: ->head .head @ ;


: ->elem  GraphElemMask and  ;  #  list -- elem

# Elem Structure   |  flags  | label | ...
struct: graph-elem
	1 cell: .elem-flags
	1 cell: .elem-label
end-struct
: .elem-flags  ;  #immediate  # save an instruction or two

struct: graph-node
	graph-elem bytes:   .node-elem
	dl-list-item bytes: .node-index
	dl-list bytes:      .node-out-edges
	dl-list bytes:      .node-in-edges
	dl-list bytes:      .node-loops
end-struct
? graph-node   11 cells   =   assertion: graph-node is 11 cells

struct: graph-edge
	graph-elem bytes:   .edge-elem
	1 cell:             .edge-src
	1 cell:             .edge-tgt
	dl-list-item bytes: .edge-in-list
	dl-list-item bytes: .edge-out-list
end-struct
? graph-edge   10 cells   =   assertion: graph-edge is 10 cells

: ->src  .edge-src @  ;
: ->tgt  .edge-tgt @  ;

: alloc-elem  #  -- elem
	freelist @ dup  if
		dup @ freelist !
	else
		use-dict
		drop here GraphElemSize allot
		use-anon
	endif 
;
: free-elem   #  elem -- 
	freelist @ over !
	freelist !
;

: available-space   # -- n-elems
	use-dict
	get-brk-addr here -   bytes->elems
	use-anon
;

exception: OutOfMemory
: check-space
	available-space 1 <= if
		get-heap-size
		stash 0 < if
			# high bit is already set, we can't double any more,
			# and we're in danger of running into the stack and mmapped area
			OutOfMemory raise
		endif
		pop 1 shift-up set-heap-size  # double the memory
	endif
;


: bitfield     0    ;  #immediate
: end-bitfield  #immediate
?	dup 1 cell 8 *  <=  assertion: Bitfield overflows one cell
	drop
;

: make-bitmask  1 swap shift-up 1-  swap shift-up ; # shift width -- mask

: bits:  #immediate
	create  # shift width -- shift'
		over over make-bitmask ,
		over , dup , +
	does
;
# : bit:  ` bits:  ; #immediate

: mask  @  ;  #  bits -- mask
: shift 1 cell after @ ;  # bits -- shift
: width 2 cells after @ ; # bits -- width
: set?    mask and ;  #  bitfield bits -- raw
: value   stash set?   pop shift shift-down ;  #  bitfield bits -- value
: clear-bits   # bitfield field -- bitfield'
	mask not and
;
: set-bits  # bfld field val -- bfld'
	# set field of cell at addr to val
	push stash clear-bits
	pop shift pop swap shift-up
	or
;

bitfield
	2 bits: TypeFlag
	1 bits: RFlag
	2 bits: LFlag
	2 bits: IFlag
	2 bits: OFlag
	3 bits: CFlag
	1 bits: BFlag
	1 bits: IsBound
end-bitfield

0 constant: FreeType
1 constant: NodeType
2 constant: EdgeType

# 2 constant: TypeBits
# 1 constant: LabelFlagBits
# 3 constant: ColourFlagBits
# 2 constant: OFlagBits
# 2 constant: IFlagBits
# 2 constant: LFlagBits
# 1 constant: RFlagBits

# doubly-linked-list support

: _item  2 $$@  ;  # readability aids for cons
: _list  1 $$@  ;
: _next  0 $$@  ;
: cons  # item list --
	dup ->first
	3 locals
?	_item assertion: uninitialised item in list insert
?	_list assertion: uninitialised list in list insert
	_next    _item .next  !   # item.next = &next 
	_list    _item .head  !   # item.head = &list
	Nothing  _item .prev  !   # item.prev = NULL
	
	_next  if   _item    _next  .prev !   endif   # first.prev = &item
	_item    _list .first !   # list.first = &item

	_list .len inc-var
?	_list ->next ->prev 0        =  assertion: First list item has non-null .prev
?	_list ->next        _item    =  assertion: Head of _list is not _item
?	_list .len @        0        >  assertion: List length should be greater than zero
?	_item ->head _list           =  assertion: _item.head doesn't point to _list
;

: _prev  2 $$@  ;  # readability aids for uncons
: _list  1 $$@  ;
: _next  0 $$@  ;
: uncons  # item -- 
	stash ->prev  peek ->head   pop ->next
	3 locals
	_prev if
		_next   _prev .next  !    # prev.next = &next
	else
		_next   _list .first !    # list.first = &next
	endif
	_next if   _prev   _next .prev  !  endif  # next.prev = &prev
	_list .len dec-var
;


: node-signature   .elem-flags @   TypeFlag width  shift-down   ;  # node -- sig
: index-node   # node -- 
	stash .node-index   pop node-signature oilr-index   cons
;
: unindex-node  # node --
	.node-index uncons
;


: set-edge-as-loop  # node edge --
	# Put edge.edge-out-list into node.node-loops
	stash .edge-out-list  over .node-loops cons
	dup peek .edge-src !
	pop      .edge-tgt !
;
: set-edge-src  #  src edge --
	# put edge.edge-out-list into node.node-out-edges
	stash .edge-out-list  over .node-out-edges cons
	pop .edge-src !
;
: set-edge-tgt  #  tgt edge --
	stash .edge-in-list  over .node-in-edges cons
	pop .edge-tgt !
;

: init-node   NodeType over .elem-flags !  ;  # elem -- node
: init-edge  # src tgt elem -- edge
?	dup  host @  >   assertion: not an element in init-edge
	EdgeType over .elem-flags !
	push over over = if  # src == tgt. It's a loop
		drop peek set-edge-as-loop
	else  # it's a regular edge
		peek set-edge-tgt
		peek set-edge-src
	endif
	pop
;

: is-node?  .elem-flags @   NodeType  and  bool ;
: is-edge?  .elem-flags @   EdgeType  and  bool ;

# Graph element creation and deletion
: unsafe-add-node   alloc-elem init-node dup index-node  ;  # -- node
: unsafe-add-edge   alloc-elem init-edge             ;  # src tgt -- edge

: add-node  check-space unsafe-add-node drop ;  # --
: edge      check-space unsafe-add-edge ;  # src tgt -- edge

: delete-node   dup unindex-node free-elem   ;         # node --
: delete-edge   free-elem   ;         # edge --


: nodes   # n -- 
	stash available-space  >=  if
		# if there isn't space, allocate enough...
		peek elems  grow-heap
	endif
	pop times  unsafe-add-node drop  repeat
;


: is-root?  .elem-flags @  RFlag set?   ;  # elem -- n
: set-root-flag    stash .elem-flags @   RFlag mask    or  pop .elem-flags !  ;  # bool elem --

: has-label?   .elem-flags @   BFlag set?   ;   # elem -- n
: set-label-flag   stash .elem-flags @   BFlag mask   or  pop .elem-flags !  ;  # n elem -- 

: label  # label elem -- 
	stash .elem-label !
	pop set-label-flag
;

: out-deg  .node-out-edges ->len  ;  # node -- n
: in-deg   .node-in-edges  ->len  ;  # node -- n
: loop-deg .node-loops     ->len  ;  # node -- n

: canonical-out-deg  stash out-deg pop loop-deg + ;
: canonical-in-deg   stash in-deg  pop loop-deg + ;

0 constant: Uncoloured
1 constant: Red
2 constant: Blue
3 constant: Green
4 constant: Grey
7 constant: Dashed

: get-colour  .elem-flags @  CFlag value  ;
: colour  # colour elem --
	push CFlag shift  shift-up
	peek .elem-flags @  CFlag mask not  and  or # clear the old colour then set the new
	pop !
;

# : graph-elem    elems   host @   +    ; # n -- elem
: get-elem-by-id GraphElemShift shift-up  host @  swap  + ;  # n -- elem
: get-elem-id   host @ -  bytes->elems  ;  # elem -- n
: count-elems   use-dict   here get-elem-id   use-anon  ;

# bind and unbind elements
: is-bound?  # elem -- bool
	.elem-flags @  IsBound  set?  bool
;
? variable: bind-ops
: bind  # elem --
?	dup is-bound?  false  = assertion: Element already bound
	.elem-flags dup @   IsBound 1 set-bits   swap !
?	bind-ops inc-var
;
: unbind
?	dup is-bound?  true   = assertion: Element already unbound
	.elem-flags dup @   IsBound clear-bits   swap !
;  # elem --


# Boolean register
: oilr-true  true  bool-flag ! ;
: oilr-false false bool-flag ! ;


# create a search space
struct: search-space
	1 cell:  .spc-posn
	1 cell:  .spc-next-index
end-struct
: .spc-indices  search-space +  ;

: space:  #immediate
	create # ... n -- 
		search-space allot
		times oilr-index ,  repeat
		0 ,      # null terminator
	does  # addr -- node
;

: update-space   .spc-posn !  ;  # node-chain? spc --
: space-cur      .spc-posn @  ;  # spc -- node-chain?
: space-reset  # spc -- 
	push   0 peek .spc-posn !   0 pop .spc-next-index !
;
: space-adv-ind  # spc -- chain
	# advance to the next index in the search space
	stash .spc-indices   peek .spc-next-index @   cells after   @
		dup  pop  .spc-posn !
	peek .spc-next-index  inc-var
;
: space-next-item  # spc -- node
	stash space-cur dup if
		->next 
		dup peek update-space
	else
		drop peek space-adv-ind   if
			pop tail: space-next-item
		endif
	endif
	trash ->elem
;
: space-next-unbound  # spc -- node-chain?
	stash space-next-item   dup if
		dup is-bound? if   drop pop tail: space-next-unbound   endif
	endif
	trash
;

# ######   Graph output   ######################################### #

: spc 32 %c ;

exception: TODO

: _put-label # elem -- 
	dup has-label? if
		.elem-label @ %d
	else
		drop StrEmpty %s
	endif
;
: _put-colour  # elem --
	get-colour ColourTable swap cells after @ %s
;

: put-node   # elem --
	StrLeader           %s
		'n'             %c
		dup get-elem-id %d
		dup is-root? if RootMarker  %s endif
		StrComma        %s
		dup _put-label
		_put-colour
		StrTrailer      %s
	flush-output
;
: put-edge
	StrLeader %s   'e' %c
		dup get-elem-id %d   StrComma %s
		dup .edge-src @ get-elem-id   'n' %c %d   StrComma %s
		dup .edge-tgt @ get-elem-id   'n' %c %d   StrComma %s
		dup _put-label   _put-colour   StrTrailer %s
	flush-output
;

: dump-graph
	'[' putc '\n' putc
	host @
	count-elems  # number of elems
	stash times   dup is-node? if  dup put-node  endif   next-elem  repeat   drop
	'|' putc '\n' putc
	host @
	pop   times   dup is-edge? if  dup put-edge  endif   next-elem  repeat
	']' putc '\n' putc
;

: maybe   # -- bool
	false  # todo: implementation based on pseudo-random numbers
;

# ######   OILR machine instructions   ############################ #

#      OILR Int          -- Number of OILR indices
#    -- Graph modification
#    | ABN Dst           -- Add and Bind Node to register Dst
#    | ABE Dst Src Tgt   -- Add and Bind Edge to register Dst between nodes in Src & Tgt
#    | DBN Dst           -- Delete Bound Node 
#    | DBE Dst           -- Delete Bound Node
#    
#    | RBN Dst Bool      -- set Root on Bound Node to Bool
#    
#    | CBL Dst Col       -- Colour Bound eLement
#    | LBL Dst Int       -- Label Bound eLement with Int

: abn  $$  add-node  swap ! ;
: abe  $$  ;

: dbn  $$ @  ->elem  delete-node  ;
: dbe  $$ @  ->elem  delete-edge  ;

: rbn  $$ @ ->elem  set-root-flag ;  # bool reg
: cbl  $$ @ ->elem  colour ;   # colour reg
: lbl  $$ @ ->elem  label ;    # label  reg


#    -- Graph search
#    | BND Dst Spc          -- Bind next unbound NoDe in Spc to Dst
#    | BED Dst Reg Reg Dir  -- Bind EDge between Regs in Dir
#    | BEN Dst Dst Src Dir  -- Bind Edge and Node by following an edge in Dir from Src
#    | NEC Src Tgt          -- Negative Edge Condition from Src to Tgt

1  constant: DirOut
0  constant: DirEither
-1 constant: DirIn

: bnd  #  dest spc -- bool
	# traverse a search space
	space-next-unbound 
	dup if
		swap $$ !
		oilr-true return
	endif
	oilr-false
;

: bed  #  dest r1 r2 dir
	# Bind an edge between nodes in r1 and r2 in direction dir
	
;
: ben  #  eDest nDest reg dir
	# Bind an edge with one end at node in reg in dir, storing 
	# edge in eDest and node on opposite end in nDest
	
;
: nec  #  src tgt
	# check there is no edge from src to tgt
	
;



#    -- Definitions & program structure
#    | DEF Id               -- DEFine function Id
#    | CAL Id               -- CALl Id, pushing current IP to call-stack
#    | TAR Target           -- jump TARget
#    | BRZ Target           -- BRanch if Zero (i.e. if bool flag is false)
#    | BNZ Target           -- Branch if Non-Zero
#    | BRA Target           -- Branch RAndomly. Take the branch 50% of the time.
#    | BRN Target           -- unconditional BRaNch to Target
#    | RET                  -- RETurn to IP on top of call-stack
#    | RTZ                  -- ReTurn if Zero
#    | RNZ                  -- Return if Non-Zero
#
#    -- Backtracking
#    | BBT                  -- Begin BackTracking section
#    | BAK                  -- unconditionally roll-BAcK backtracking section changes
#    | EBT                  -- End BackTracking secion: commit if flag is true, rollback otherwise
#    -- There is no rollback command. This needs to be done manually with reverse rules.
#
#    -- Stack machine
#    | BLO Dst              -- push Bound eLement Out-degree to stack
#    | BLI Dst              -- push Bound eLement In-degree to stack
#    | BLL Dst              -- push Bound eLement looP-degree to stack
#    | BLR Dst              -- push Bound eLement Rootedness to stack
#    | BLN Dst              -- push Bound eLement's Numeric label to stack
#    | BLC Dst              -- push Bound eLement Colour to stack
#
#    | SHL Int              -- SHift top-of-stack Left by Int bits
#    | OR                   -- bitwise OR top 2 values on the stack
#    | AND                  -- bitwise AND top 2 value on the stack
#
#    -- Misc
#    | NOP                  -- No-OP
#    | TRU                  -- set the boolean register to TRUe
#    | FLS                  -- set the boolean register to FaLSe

# Branch instructions
: brn  ' branch ,   ;  #immediate
: brz  ' zbranch ,  ;  #immediate
: bnz  ' not   , ' zbranch , ;  #immediate
: bra  ' maybe , ' zbranch , ;  #immediate

# Return instructions
: ret  trash ;
: rtz  if return endif  trash ;
: rnz  if trash endif   ;

# Backtracking
: bbt  ' b-return b-push ; 
: bak  bool-flag @  false bool-flag !  b-call  bool-flag ! ;
: ebt  b-call  ;

# Misc
: nop ;
: tru  true  bool-flag ! ;
: fls  false bool-flag ! ;

# ################################################################# #

: registers  #immediate
	[ stash times 0 repeat   pop locals ] inline
;

# ################################################################# #

# : #tgt  ' peek ,  ' 1 ,  ' cell ,  ' after ,  ' @ ,   ; #immediate
: #tgt  [ peek 1 cell after @ ] inline   ; #immediate
: -->  #tgt  edge drop ;  # src --
: ..>  #tgt  edge  Dashed swap  colour ; # src --

: -(  ; #immediate
: .(  ; #immediate
: )->  swap  #tgt edge  label ; # src label -- 
: ).>  swap  #tgt edge  stash label  Dashed pop colour ; # src label -- 

: path drop ;

? ds-depth 0 =   assertion: Unbalanced stack after graph library compilation

# ################################################################# #


# LabelFlagBits
# 	ColourFlagBits +
# 	OFlagBits +
# 	IFlagBits +
# 	LFlagBits +
# 	RFlagBits + 
# 1		OILR index

# : rule
# 	frame
# #	1 registers
# 	0  0  bnd   # bind node from spc 0 in reg 0
# 	rtz
# 
# 	0 dbn     # delete node bound in reg 0
# 	unframe
# ;
# 
# : Main ;

? ds-depth 0 =   assertion: Unbalanced stack after program compilation


# ################################################################# #
# Host graph only! No definitions from here on down...

# host-graph
# 	? ds-depth putn nl
# 	3 nodes
# 	? ds-depth putn nl
# 	42 1n label
# 	? ds-depth putn nl
# 	Red 2n colour
# 	? ds-depth putn nl
# 	
# 	#       3           4        5          6
# 	1n  -( 23 )->  2n  -->  0n  ..>  1n  .( 6 ).>  0n  path
# 	? ds-depth putn nl
# 


#	Dashed 4e colour

? ds-depth 0 =  assertion: Unbalanced stack after host creation

# [ count-elems putn nl  get-brk-addr putx nl  anon-code-area-addr @ putx nl  0-exit ] handles OutOfMemory
# forever  add-node  repeat
# -1 times   LabelFlagBits drop  repeat
# -1 times   host @ drop  repeat

# Main
# 
# dump-graph
# available-space putn nl
# 0-exit

# vim:ft=oilr
