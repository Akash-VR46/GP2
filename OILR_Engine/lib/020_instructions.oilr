: OILR #immediate
	create # n --
?		dup 0 >  assertion: There must be at least one OILR index
		here 2 cells before push
		dup index-size !
		2* cells allot
?		peek @   DoDoesAddr  =  assertion: created broken index
		pop _real-index !
	does  # n addr -- addr
		swap
?		dup  index-size @  <  assertion: requested invalid index
		2* cells after
;
: dump-graph-and-exit  ` ;  dump-graph  0-exit ;
: host-graph #immediate
?	_real-index @  assertion: Uninitialised OILR index
	` ;
	use-dict
	elem-align-dp
	here host !
	here host-free !
	' dump-graph-and-exit handles EndOfFile
	use-anon
;

# ######   OILR machine instructions   ############################ #

#      OILR Int          -- Number of OILR indices
#    -- Graph modification
#    | ABN Dst           -- Add and Bind Node to register Dst
#    | ABE Dst Src Tgt   -- Add and Bind Edge to register Dst between nodes in Src & Tgt
#    | DBN Dst           -- Delete Bound Node 
#    | DBE Dst           -- Delete Bound Node
#    
#    | RBN Dst Bool      -- set Root on Bound Node to Bool
#    
#    | CBL Dst Col       -- Colour Bound eLement
#    | LBL Dst Int       -- Label Bound eLement with Int

: abn  $$  add-node  swap ! ;  # reg --
: abe  $$ push push   $$@ pop $$@ edge   pop ! ;  # src tgt reg --

: dbn  $$@  ->elem  delete-node  ;
: dbe  $$@  ->elem  delete-edge  ;

: rbn  $$@ ->elem  set-root-flag ;  # bool reg
: cbl  $$@ ->elem  colour ;   # colour reg
: lbl  $$@ ->elem  label ;    # label  reg


#    -- Graph search
#    | BND Dst Spc          -- Bind next unbound NoDe in Spc to Dst
#    | BED Dst Reg Reg Dir  -- Bind EDge between Regs in Dir
#    | BEN Dst Dst Src Dir  -- Bind Edge and Node by following an edge in Dir from Src
#    | NEC Src Tgt          -- Negative Edge Condition from Src to Tgt

1  constant: DirOut
0  constant: DirEither
-1 constant: DirIn

: bnd  #  dest spc -- bool
	# traverse a search space
	space-next-unbound 
	dup if
		dup bind
		swap $$ !
		oilr-true return
	endif
	oilr-false
;

: bed  #  dest r1 r2 dir
	# Bind an edge between nodes in r1 and r2 in direction dir
	
;
: ben  #  eDest nDest reg dir
	# Bind an edge with one end at node in reg in dir, storing 
	# edge in eDest and node on opposite end in nDest
	
;
: nec  #  src tgt
	# check there is no edge from src to tgt
	
;



#    -- Definitions & program structure
#    | DEF Id               -- DEFine function Id
#    | CAL Id               -- CALl Id, pushing current IP to call-stack
#    | TAR Target           -- jump TARget
#    | BRZ Target           -- BRanch if Zero (i.e. if bool flag is false)
#    | BNZ Target           -- Branch if Non-Zero
#    | BRA Target           -- Branch RAndomly. Take the branch 50% of the time.
#    | BRN Target           -- unconditional BRaNch to Target
#    | RET                  -- RETurn to IP on top of call-stack
#    | RTZ                  -- ReTurn if Zero
#    | RNZ                  -- Return if Non-Zero
#
#    -- Backtracking
#    | BBT                  -- Begin BackTracking section
#    | BAK                  -- unconditionally roll-BAcK backtracking section changes
#    | EBT                  -- End BackTracking secion: commit if flag is true, rollback otherwise
#    -- There is no rollback command. This needs to be done manually with reverse rules.
#
#    -- Stack machine
#    | BLO Dst              -- push Bound eLement Out-degree to stack
#    | BLI Dst              -- push Bound eLement In-degree to stack
#    | BLL Dst              -- push Bound eLement looP-degree to stack
#    | BLR Dst              -- push Bound eLement Rootedness to stack
#    | BLN Dst              -- push Bound eLement's Numeric label to stack
#    | BLC Dst              -- push Bound eLement Colour to stack
#
#    | SHL Int              -- SHift top-of-stack Left by Int bits
#    | OR                   -- bitwise OR top 2 values on the stack
#    | AND                  -- bitwise AND top 2 value on the stack
#
#    -- Misc
#    | NOP                  -- No-OP
#    | TRU                  -- set the boolean register to TRUe
#    | FLS                  -- set the boolean register to FaLSe

# Branch instructions
: brn  ' branch ,   ;  #immediate
: brz  ' zbranch ,  ;  #immediate
: bnz  ' not   , ' zbranch , ;  #immediate
: bra  ' maybe , ' zbranch , ;  #immediate

# Return instructions
: ret  trash ;  # pop the return address
: rtz  bool-flag @ if return endif  trash ;  # if true do nothing, else pop the return address
: rnz  bool-flag @ if trash endif   ;  # if true pop the return address

# Backtracking
: bbt  ' b-return b-push ; 
: bak  bool-flag @  oilr-false  b-call  bool-flag ! ;
: ebt  b-call  ;

# Misc
: nop ;
: tru  true  bool-flag ! ;
: fls  false bool-flag ! ;


# ################################################################# #

# : #tgt  ' peek ,  ' 1 ,  ' cell ,  ' after ,  ' @ ,   ; #immediate
: #tgt  [ peek 1 cell after @ ] inline   ; #immediate
: -->  #tgt  edge drop ;  # src --
: ..>  #tgt  edge  Dashed swap  colour ; # src --

: -(  ; #immediate
: .(  ; #immediate
: )->  swap  #tgt edge  label ; # src label -- 
: ).>  swap  #tgt edge  stash label  Dashed pop colour ; # src label -- 

: path drop ;

? ds-depth 0 =   assertion: Unbalanced stack after instruction defs

# vim:ft=oilr
