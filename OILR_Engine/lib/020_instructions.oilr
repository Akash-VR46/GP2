: make-implicit-loop  $( addr -- )
	# WARNING. Return-stack jiggery-pokery!
	# Explanation: inlines code to turn the currently executing function
	# into the first instruction of a loop. The next call to
	# return will initiate the next iteration.
	[ bool-flag @ not if  return  endif ] inline
	' pop ,  compile-literal ' push , ' push ,
;


: compile-prefix-instr-and-args  $( addr -- )
	stash @  times  word find call  repeat
	pop 1 cell after ,
;
: arg-instr:   #immediate
	create-immed   $(  lambda n-args -- )
		,  dup data-length keep  drop
	does   $(  addr  --  )
		compile-prefix-instr-and-args
;
: arg-looping-instr:  #immediate
	create-immed   $( lambda n-args -- )
		,  dup data-length keep  drop
	does   $(  addr -- )
		here swap
		compile-prefix-instr-and-args
		make-implicit-loop
;

# ######   OILR machine instructions   ############################ #

#      OILR Int          -- Number of OILR indices
#    -- Graph modification
#    | ABN Dst           -- Add and Bind Node to register Dst
#    | ABE Dst Src Tgt   -- Add and Bind Edge to register Dst between nodes in Src & Tgt
#    | DBN Dst           -- Delete Bound Node 
#    | DBE Dst           -- Delete Bound Node
#    
#    | RBN Dst Bool      -- set Root on Bound Node to Bool
#    
#    | CBL Dst Col       -- Colour Bound eLement
#    | LBL Dst Int       -- Label Bound eLement with Int

[ add-node  swap $$! ]                     1 arg-instr: abn
[ push push  $$@ pop $$@ edge   pop $$! ]  1 arg-instr: abe

# : abn  $$  add-node  swap ! ;  # reg --
# : abe  $$ push push   $$@ pop $$@ edge   pop ! ;  # src tgt reg --

[ $$@  ->elem  delete-node ]   1 arg-instr: dbn
[ $$@  ->elem  delete-edge ]   1 arg-instr: dbe

# : dbn  $$@  ->elem  delete-node  ;
# : dbe  $$@  ->elem  delete-edge  ;

[ $$@ ->elem  set-root-flag ]  2 arg-instr: rbn  # <bool reg>
[ $$@ ->elem  colour ]         2 arg-instr: cbl  # <col reg>
[ $$@ ->elem  label  ]         2 arg-instr: lbl  # <label reg>

# : rbn  $$@ ->elem  set-root-flag ;  # bool reg
# : cbl  $$@ ->elem  colour ;   # colour reg
# : lbl  $$@ ->elem  label ;    # label  reg


#    -- Graph search
#    | BND Spc Dst          -- Bind next unbound NoDe in Spc to Dst
#    | BED Reg Reg Dst      -- Bind EDge between Regs in Dir
#    | BIN Dst Dst Src      -- Bind Incoming-edge and Node from Src
#    | BON Dst Dst Src      -- Bind Outgoing-edge and Node from Src
#    | BLO Src Dst          -- Bind LOop on node in Src
#    | NEC Src Tgt          -- Negative Edge Condition from Src to Tgt


# Save and restore return stack pointers. These _must not_ be
# words, otherwise their own return address will pollute the stack
' rsp@ alias: rss  # -- rsp
' rsp! alias: rsr  # rsp --

: bind-and-store  $( addr elem -- )
	dup if
		dup bind
		swap !
		oilr-true
	else
		oilr-false
	endif
;

#  BND :: spc dest --
: ins-bnd  $( spc dest -- )
?	dup putn nl
	$$ dup @ ->elem unbind-if-bound
	swap  space-next-unbound  bind-and-store
;
[ ins-bnd ] 2 arg-looping-instr: bnd

: ins-blo  $( src dest -- )
	dup ->elem unbind-if-bound
	swap ->elem .node-loops   chain-next-unbound
	dup if
		dup bind
		swap $$!
		oilr-true
	else
		oilr-false
	endif
;
[ ins-blo ] 2 arg-looping-instr: blo

#  BED :: src tgt dest --
: ins-bed
	dup ->elem unbind-if-bound
	
	dup if
		dup bind
		swap $$ !
		oilr-true
	else
		oilr-false
	endif
;
[ ins-bed ] 3 arg-looping-instr: bed

# : bnd  #  dest spc -- 
# 	# traverse a search space
# 	space-next-unbound 
# 	dup if
# 		dup bind
# 		swap $$ !
# 		make-implicit-loop
# 		oilr-true return
# 	endif
# 	oilr-false
# 	trash  # return from calling function (or initiate next cycle of implicit loop)
# ;
# : bed  #  dest src tgt
# 	# Bind an edge from src to tgt
# #	$$@ push $$@ .node-out-edges  peek next-unbound-edge-to
# 	dup if
# 		dup bind
# 		swap $$ !
# 		oilr-true return
# 	endif
# 	trash
# 	oilr-false
# ;
: bbe  #  dest r1 r2
;
: ben  #  eDest nDest reg dir
	# Bind an edge with one end at node in reg in dir, storing 
	# edge in eDest and node on opposite end in nDest
	
;
: nec  #  src tgt
	# check there is no edge from src to tgt
	
;



#    -- Definitions & program structure
#    | DEF Id               -- DEFine function Id
#    | CAL Id               -- CALl Id, pushing current IP to call-stack
#    | TAR Target           -- jump TARget
#    | BRZ Target           -- BRanch if Zero (i.e. if bool flag is false)
#    | BNZ Target           -- Branch if Non-Zero
#    | BRA Target           -- Branch RAndomly. Take the branch 50% of the time.
#    | BRN Target           -- unconditional BRaNch to Target
#    | RET                  -- RETurn to IP on top of call-stack
#    | RTZ                  -- ReTurn if Zero
#    | RNZ                  -- Return if Non-Zero
#
#    -- Backtracking
#    | BBT                  -- Begin BackTracking section
#    | BAK                  -- unconditionally roll-BAcK backtracking section changes
#    | EBT                  -- End BackTracking secion: commit if flag is true, rollback otherwise
#    -- There is no rollback command. This needs to be done manually with reverse rules.
#
#    -- Stack machine
#    | BLO Dst              -- push Bound eLement Out-degree to stack
#    | BLI Dst              -- push Bound eLement In-degree to stack
#    | BLL Dst              -- push Bound eLement looP-degree to stack
#    | BLR Dst              -- push Bound eLement Rootedness to stack
#    | BLN Dst              -- push Bound eLement's Numeric label to stack
#    | BLC Dst              -- push Bound eLement Colour to stack
#
#    | SHL Int              -- SHift top-of-stack Left by Int bits
#    | OR                   -- bitwise OR top 2 values on the stack
#    | AND                  -- bitwise AND top 2 value on the stack
#
#    -- Misc
#    | NOP                  -- No-OP
#    | TRU                  -- set the boolean register to TRUe
#    | FLS                  -- set the boolean register to FaLSe

# Branch instructions
: brn  ' branch ,   ;  #immediate
: brz  ' zbranch ,  ;  #immediate
: bnz  ' not   , ' zbranch , ;  #immediate
: bra  ' maybe , ' zbranch , ;  #immediate

# Return instructions
: ret  trash ;  # pop the return address
: rtz  bool-flag @ if return endif  trash ;  # if true do nothing, else pop the return address
: rnz  bool-flag @ if trash endif   ;  # if true pop the return address

# Backtracking
: bbt  ' b-return b-push ; 
: bak  bool-flag @  oilr-false  b-call  bool-flag ! ;
: ebt  b-call  ;

# Misc
: nop ;
: tru  true  bool-flag ! ;
: fls  false bool-flag ! ;


# ################################################################# #

: #tgt  [ peek 1 cell after @ ] inline   ; #immediate
: -->  #tgt  edge drop ;  # src --
: ..>  #tgt  edge  Dashed swap  colour ; # src --

: -(  ; #immediate
: .(  ; #immediate
: )->  swap  #tgt edge  label ; # src label -- 
: ).>  swap  #tgt edge  stash label  Dashed pop colour ; # src label -- 

: path drop ;

? ds-depth 0 =   assertion: Unbalanced stack after instruction defs

# vim:ft=oilr
