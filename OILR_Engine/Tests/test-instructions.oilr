1 OILR index

[ * ]  2 arg-instr: tst
[ 99 oilr-true ] 0 arg-looping-instr: loo

0 1 space: s0
0 1 space: s1

: prefix-test-rule
	tst 23 10
;
# : prefix-loop-rule
	# loo
# ;


: bind-node
	rss
	bnd s0 0
	rsr
;

: bind-node-plus-loop
	rss
	bnd s0 0 
	blo 0  2
	rsr
;


host-graph
	10 nodes

	1n --> 1n path
	2n --> 3n --> 4n path


Testing Prefix instructions
	prefix-test-rule          230   test: Prefix rule functionality
	# prefix-loop-rule          99   test: Implicity looping instructions
	ds-depth                  0     test: loop doesn't pollute stack


Testing Search plans
	# ds-depth  0 test: Stack imbalance before instructions

	3 registers
	bind-node
	0 $$@ is-bound?      true   test: bind-node r0 bound 
	bind-node-plus-loop
	bool-flag @          true   test: rule succeeded
	0 $$@ is-bound?      true   test: r0 is bound
	# 0 $$@  1 $$@  =      false  test: r1 <> r0
	2 $$@                10e    test: bind loop
	2 $$@ is-bound?      true   test: r2 is bound

# Testing Graph modification
	             0 $$@ is-root?       false  test: r0 not root
	rbn 1 0      0 $$@ is-root?       true   test: r0 root
	             0 $$@ get-colour     Uncoloured  test: r0 uncoloured
	cbl Red 0    0 $$@ get-colour     Red         test: r0 red
	             0 $$@ has-label?     false  test: r0 unlabelled
	lbl 42 0     0 $$@ has-label?     true   test: r0 labelled
	             0 $$@ get-label      42     test: r0 label is 42

	ds-depth  0 test: Stack imbalance after instructions


unframe # required clean-up after call to registers

; 
nl
# dump-graph
nl 0-exit ;

# vim:ft=oilr
