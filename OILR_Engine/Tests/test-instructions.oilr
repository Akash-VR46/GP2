1 OILR index

: tst  #ins3      $( a b dest -- )  push  * pop $$! ;
: loo  #loopins2  $( a reg -- )  $$! break-or-start-loop ;

oilr-true  ;

0 1 space: s0
0 1 space: s1

' trash alias: rsd

: prefix-test-rule  $( -- n )
	1 registers
	rss
	tst 23 10  0
	rsr
	0 $$@
;
: prefix-loop-rule  $( -- n )
	1 registers
	rss
	loo 99 0
	rsr
	0 $$@
;


: bind-node   $( -- elem )
	1 registers
	rss
	bnd s0 0
	rsr
	0 $$@
	ubr 0
;

: bind-node-plus-loop
	2 registers
	rss
? 	ds-depth putn 
	bnd s0 0 
?	0 $$@ get-elem-id putn
	blo 0  1
?	1 $$@ putn 
	rsr
	ubr 0
	ubr 1
;


host-graph
	10 nodes

	1n --> 1n path
	2n --> 3n --> 4n path


Testing Prefix instructions
	prefix-test-rule          230   test: Prefix rule functionality
	prefix-loop-rule          99   test: Implicity looping instructions
	ds-depth                  0     test: loop doesn't pollute stack


Testing Search plans
	# ds-depth  0 test: Stack imbalance before instructions

	bind-node            9n     test: bind-node bound 9n
	bool-flag @          true   test: bind-node returned true
	9n is-bound?         false  test: bind-node 9n has been unbound 

	bind-node-plus-loop  1n     test: bind-node-plus-loop bound 1n
	bool-flag @          true   test: rule succeeded
	0 $$@ is-bound?      true   test: r0 is bound
	# 0 $$@  1 $$@  =      false  test: r1 <> r0
	2 $$@                10e    test: bind loop
	2 $$@ is-bound?      true   test: r2 is bound

# Testing Graph modification
	             0 $$@ is-root?       false  test: r0 not root
	rbn 1 0      0 $$@ is-root?       true   test: r0 root
	             0 $$@ get-colour     Uncoloured  test: r0 uncoloured
	cbl Red 0    0 $$@ get-colour     Red         test: r0 red
	             0 $$@ has-label?     false  test: r0 unlabelled
	lbl 42 0     0 $$@ has-label?     true   test: r0 labelled
	             0 $$@ get-label      42     test: r0 label is 42

	ds-depth  0 test: Stack imbalance after instructions



; 
nl
# dump-graph
nl 0-exit ;

# vim:ft=oilr
