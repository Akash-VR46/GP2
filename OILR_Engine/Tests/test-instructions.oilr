1 OILR index

: tst  #ins3      $( a b dest -- )  push  * pop $$! ;
: loo  #loopins2  ( loop-addr a reg -- ) 
	$$!  inject  
;

oilr-true  ;

0 1 space: s0
0 1 space: s1

' trash alias: rsd

: prefix-test-rule  $( -- n )
	1 registers
	tst 23 10  0
	0 $$@
;
: prefix-loop-rule  $( -- n )
	1 registers
	loo 99 0
	rsd
	0 $$@
;


: bind-node   $( -- elem )
	1 registers
		bnd s0 0
	rsd

	rst s0
	0 $$@
	ubr 0
;
: bind-node-plus-loop  ( -- node edge )
	2 registers
		bnd s0 0 
		blo 0  1
	rsd
	rsd

	rst s0
		0 $$@
		1 $$@
	ubr 0
	ubr 1
;
: failing-bind-two-loops $( -- )
	3 registers
		bnd s0 0
		blo 0  1
		blo 0  2
	rsd
	rsd
	rsd
	rst s0

	ubr 0
	ubr 1
	ubr 2
;
: set-root-on-node  $( -- node )
	2 registers
		bnd s0 0
		blo 0  1
	rsd
	rsd
	rst s0
		rbn true 0
	0 $$@
	ubr 0
	ubr 1
;

: set-colour-on-node  $( -- node )
	2 registers
		bnd s0 0
		blo 0  1
	rsd
	rsd
	rst s0
		cbl Red 0
	0 $$@
	ubr 0
	ubr 1
;

host-graph
	10 nodes

	1n --> 1n path
	2n --> 3n --> 4n path


Testing Prefix instructions
	prefix-test-rule          230   test: Prefix rule functionality
	prefix-loop-rule          99   test: Implicity looping instructions
	ds-depth                  0     test: loop doesn't pollute stack


Testing Search plans
	# ds-depth  0 test: Stack imbalance before instructions

	bind-node            9n     test: bind-node found 9n
	bool-flag @          true   test: bind-node returned true
	9n is-bound?         false  test: bind-node 9n has been unbound 
	'spc' putc

	bind-node-plus-loop  10e    test: bind-node-plus-loop found 1n
	                     1n     test: bind-node-plus-loop found 10e
	bool-flag @          true   test: rule succeeded
	10e is-bound?        false  test: 10e has been unbound
	1n  is-bound?        false  test: 1n has been unbound
	'spc' putc

	failing-bind-two-loops
	bool-flag @          false  test: bool-flag false after failing rule
	1n is-bound?         false  test: 1n unbound
	0n is-bound?         false  test: 0n unbound
	'spc' putc

Testing Graph modification
	1n is-root?        false       test: 9n not root
	1n get-colour      Uncoloured  test: 1n not coloured
	1n has-label?      false       test: 1n unlabelled
	'spc' putc

	set-root-on-node  1n     test: set-root-on-node found 1n
	1n is-root?       true   test: 9n root

	1n get-colour      Uncoloured  test: 1n not coloured
	set-colour-on-node 1n          test: set-colour-on-node found 1n
	1n get-colour      Red         test: 1n is Red
	

(	rbn 1 0      0 $$@ is-root?       true   test: r0 root
	             0 $$@ get-colour     Uncoloured  test: r0 uncoloured
	cbl Red 0    0 $$@ get-colour     Red         test: r0 red
	             0 $$@ has-label?     false  test: r0 unlabelled
	lbl 42 0     0 $$@ has-label?     true   test: r0 labelled
	             0 $$@ get-label      42     test: r0 label is 42
)
	ds-depth  0 test: Stack imbalance after instructions



; 
nl
# dump-graph
nl 0-exit ;

# vim:ft=oilr
